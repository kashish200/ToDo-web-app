import { JsonObject, BaseUserMeta, User, Status } from '@liveblocks/client';
import { OpaqueClient } from '@liveblocks/core';
import { StoreEnhancer } from 'redux';

declare type Mapping<T> = {
    [K in keyof T]?: boolean;
};
declare type LiveblocksContext<P extends JsonObject, U extends BaseUserMeta> = {
    /**
     * Other users in the room. Empty no room is currently synced
     */
    readonly others: readonly User<P, U>[];
    /**
     * Whether or not the room storage is currently loading
     */
    readonly isStorageLoading: boolean;
    /**
     * Connection status of the room.
     */
    readonly status: Status;
};
/**
 * Adds the `liveblocks` property to your custom Redux state.
 */
declare type WithLiveblocks<TState, P extends JsonObject, U extends BaseUserMeta> = TState & {
    readonly liveblocks: LiveblocksContext<P, U>;
};
/**
 * Actions used to interact with Liveblocks
 */
declare const actions: {
    /**
     * Enters a room and starts sync it with Redux state
     * @param roomId The id of the room
     */
    enterRoom: typeof enterRoom;
    /**
     * Leaves the currently entered room and stops sync it with Redux state.
     */
    leaveRoom: typeof leaveRoom;
};
declare function enterRoom(roomId: string): {
    type: string;
    roomId: string;
};
declare function leaveRoom(): {
    type: string;
};
/**
 * Redux store enhancer that will make the `liveblocks` key available on your
 * Redux store.
 */
declare const liveblocksEnhancer: <TState>(options: {
    client: OpaqueClient;
    storageMapping?: Mapping<TState> | undefined;
    presenceMapping?: Mapping<TState> | undefined;
}) => StoreEnhancer;

export { type Mapping, type WithLiveblocks, actions, liveblocksEnhancer };
